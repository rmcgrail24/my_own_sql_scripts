CREATE OR REPLACE PACKAGE BODY P 
IS
/*----------------------------------------------------------------
||                  PL/Vision Professional 
||----------------------------------------------------------------
||    File: p.spb
||  Author: Steven Feuerstein
||
|| This is a part of the PL/Vision Professional Code library.
|| Copyright (C) 1996-2000 RevealNet, Inc.
|| All rights reserved.
||
|| For more information, call RevealNet at 1-800-REVEAL4
|| or check out our Web page: www.revealnet.com
||
-----------------------------------------------------------------*/

/***************** Modification History **************************
||
|| Date     By     Description
||	-------- ------ -----------------------------------------------
||  8/2000  SEF    Add show_in parameter to display_wrap
|| 10/98    SEF    Add lasttime for short-term elapsed time analysis.
|| 08/98    SEF    Don't allow line length to exceed 255.
|| 06/98    SEF    Set linesep initially to NULL and do not use
||                 if it IS null.
|| 1/98     SEF    Q198 Add c_delim
|| 1/98     SEF    Put in calls to PLVconfig.
|| 10/97    SEF    Revamp sizes of linesep and prefix.
||  9/96    SEF    Add 2nd UTL_FILE l procedure
|| 11/96    SEF    Product release
|| 1/97     SEF    Upgrade for 97Q1 release.
||
******************************************************************/
   c_pkg CONSTANT PLV.identifier := 'p';

   c_max_dopl_line INTEGER := 255;

   c_delim CONSTANT CHAR(3) := ' - ';

   /* Flag that determines whether output should be displayed. */
   v_show BOOLEAN := TRUE;
   
   g_showtime BOOLEAN := FALSE; 
   g_lasttime INTEGER := NULL; 

   /* Private Variable for "linesep" */
   v_linesep PLV.identifier := NULL;

   /* Private Variable for "prefix" */
   v_prefix PLV.identifier := c_prefix; 
   v_prefix_len INTEGER := 1;

   v_linelen INTEGER := c_linelen;

   /*------------------- Private Modules -------------------*/

   PROCEDURE put_line (stg_in IN VARCHAR2)
   IS
   BEGIN
      DBMS_OUTPUT.PUT_LINE (
         v_prefix ||
         PLV.ifelse (showing_time, 
            TO_CHAR (SYSDATE, 'MM.DD.YYYY HH24:MI:SS') || '/' || 
            TO_CHAR (DBMS_UTILITY.GET_TIME - g_lasttime) || c_delim, NULL) || 
         stg_in);
      g_lasttime := DBMS_UTILITY.GET_TIME;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.ENABLE (1000000);
         DBMS_OUTPUT.PUT_LINE (
            v_prefix ||
            PLV.ifelse (showing_time, 
               TO_CHAR (SYSDATE, 'MM.DD.YYYY HH24:MI:SS') || '/' || 
               TO_CHAR (DBMS_UTILITY.GET_TIME - g_lasttime) || c_delim, NULL) || 
            stg_in);
         g_lasttime := DBMS_UTILITY.GET_TIME;
   END;

   PROCEDURE display_line 
      (show_in IN BOOLEAN, line_in IN VARCHAR2)
   IS
   BEGIN
      IF v_show OR show_in
      THEN
         IF RTRIM (line_in) IS NULL
         THEN
            put_line (PLV.nullval);

         ELSIF LTRIM (RTRIM (line_in)) = v_linesep 
         THEN
            put_line (NULL); 

         ELSIF LENGTH (line_in) > linelen
         THEN
            PLVprs.display_wrap (
               line_in, linelen-2, NULL, use_newlines => TRUE,
               show_in => show_in /* 2000.2 */);

         ELSE 
            put_line (line_in);
         END IF;
      END IF;
   END;

   /*--------------- Toggle Output Modules ---------------*/

   PROCEDURE turn_on IS
   BEGIN
      v_show := TRUE;
      DBMS_OUTPUT.ENABLE (1000000);
   END;

   PROCEDURE turn_off IS
   BEGIN
      v_show := FALSE;
   END;

   /* Body of Set for "linesep" */
   PROCEDURE set_linesep (linesep_in IN VARCHAR2)
   IS 
   BEGIN 
      v_linesep := linesep_in; 

      PLVconfig.change (c_pkg, 'LINESEP', linesep_in);
   END set_linesep;

   /* Body of Get for "linesep" */
   FUNCTION linesep RETURN VARCHAR2
   IS BEGIN RETURN v_linesep; END;
   
   /* Body of Set for "prefix" */
   PROCEDURE set_prefix (prefix_in IN VARCHAR2 := c_prefix)
   IS
   BEGIN
      v_prefix := prefix_in;
      v_prefix_len := LENGTH (prefix_in);

      PLVconfig.change (c_pkg, 'PREFIX', prefix);
   END set_prefix;

   /* Body of Get for "prefix" */
   FUNCTION prefix RETURN VARCHAR2
   IS BEGIN RETURN v_prefix; END prefix;

   /* Set line length before wrap */
   PROCEDURE set_linelen (len IN INTEGER := c_linelen) 
   IS
   BEGIN 
      v_linelen := 
         LEAST (c_max_dopl_line, 
                GREATEST (NVL (len, c_linelen), 1)); 
      PLVconfig.change (c_pkg, 'LINELEN', len);
   END;
   
   FUNCTION linelen RETURN INTEGER IS BEGIN RETURN v_linelen; END;

   /*------------------ The p.l Procedures ----------------*/

   PROCEDURE l 
      (dt IN DATE, 
       mask_in IN VARCHAR2 := PLVdate.deffmt,
       show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line (show_in, PLVdate.stg (dt, mask_in));
   END; 
   
   PROCEDURE l (num IN NUMBER, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line (show_in, TO_CHAR (num));
   END;
   
   PROCEDURE l (stg IN VARCHAR2, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line (show_in, stg);
   END;

   PROCEDURE l 
      (stg IN VARCHAR2, num IN NUMBER, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line 
         (show_in, stg || c_delim || TO_CHAR (num));
   END;
   
   PROCEDURE l 
      (stg IN VARCHAR2, 
       dt IN DATE,
       mask_in IN VARCHAR2 := PLVdate.deffmt,
       show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line 
         (show_in, stg || c_delim || PLVdate.stg (dt, mask_in));
   END;

   PROCEDURE l (bool IN BOOLEAN, show_in IN BOOLEAN := FALSE) IS
   BEGIN
      display_line (show_in, PLVbool.stg (bool));
   END;
   
   PROCEDURE l 
      (stg IN VARCHAR2, bool IN BOOLEAN, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line (show_in, stg || c_delim || PLVbool.stg (bool));
   END;
         
   PROCEDURE l 
     (file_in IN UTL_FILE.FILE_TYPE, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line (show_in, TO_CHAR (file_in.id));
   END;

   PROCEDURE l 
     (string_in IN VARCHAR2, file_in IN UTL_FILE.FILE_TYPE,
      show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      l (string_in, file_in.id, show_in);
   END;

   /* Additional overloadings */
   
   PROCEDURE l (num1 IN NUMBER, num2 IN NUMBER, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN display_line (show_in, TO_CHAR (num1) || c_delim || TO_CHAR (num2)); END;
   
   PROCEDURE l (str IN VARCHAR2,
      num1 IN NUMBER, num2 IN NUMBER, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN display_line (show_in, 
      str || c_delim || TO_CHAR (num1) || c_delim || TO_CHAR (num2)); END;
   
   PROCEDURE l (bool1 IN BOOLEAN, bool2 IN BOOLEAN, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN
      display_line (show_in, PLVbool.stg (bool1) || c_delim || PLVbool.stg (bool2));
   END;

   PROCEDURE l (stg1 IN VARCHAR2, stg2 IN VARCHAR2, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN display_line (show_in, stg1 || c_delim || stg2); END;

   PROCEDURE l (dt1 IN DATE, dt2 IN DATE, 
      mask_in IN VARCHAR2 := PLVdate.deffmt, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN 
      display_line (show_in, 
         PLVdate.stg (dt1, mask_in) || c_delim || PLVdate.stg (dt2, mask_in));
   END;

   PROCEDURE l (num IN NUMBER, dt IN DATE, 
      mask_in IN VARCHAR2 := PLVdate.deffmt, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN 
      display_line (show_in, TO_CHAR (num) || c_delim || PLVdate.stg (dt, mask_in));
   END;

   PROCEDURE l (bool IN BOOLEAN, num IN NUMBER, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN 
      display_line (show_in, PLVbool.stg (bool) || c_delim || TO_CHAR (num));
   END;
   
   PROCEDURE l (bool IN BOOLEAN, dt IN DATE,  
      mask_in IN VARCHAR2 := PLVdate.deffmt, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN 
      display_line (show_in, PLVbool.stg (bool) || c_delim || PLVdate.stg (dt, mask_in));
   END;

   PROCEDURE l (bool IN BOOLEAN, stg IN VARCHAR2, show_in IN BOOLEAN := FALSE) 
   IS
   BEGIN 
      display_line (show_in, stg || c_delim || PLVbool.stg (bool));
   END;

   PROCEDURE help (topic_in IN VARCHAR2 := NULL) IS
   BEGIN 
      p.l ('PLVhlp disabled; please check Knowledge Base for current documentation.'); /* PLVhlp.plvshow (c_pkg, topic_in); */ 
   END;

   /* Show time stamp toggle. Default is NOSHOW. */
   PROCEDURE showtime IS BEGIN g_showtime := TRUE; g_lasttime :=NULL; END;
   PROCEDURE noshowtime IS BEGIN g_showtime := TRUE; g_lasttime :=NULL; END;
   FUNCTION showing_time RETURN BOOLEAN IS BEGIN RETURN g_showtime; END;
END p;
/
